class Color{constructor(t,e,r,s=t<<16|e<<8|r){this._count=1,this.__saturation=-1,this.__hue=-1,this.__lightness=-1,this.__intensity=-1,this._red=t,this._green=e,this._blue=r,this._hex=s}static distance(t,e){return(Math.abs(e._red-t._red)+Math.abs(e._green-t._green)+Math.abs(e._blue-t._blue))/765}clone(){let t=new Color(this._red,this._green,this._blue,this._hex);return t._count=this._count,t}updateHSL(){let t=this._red/255,e=this._green/255,r=this._blue/255,s=Math.max(t,e,r),i=Math.min(t,e,r);if(this.__lightness=(s+i)/2,s===i)this.__hue=0,this.__saturation=0,this.__intensity=0;else{let n=s-i;switch(this.__saturation=this.__lightness>.5?n/(2-s-i):n/(s+i),this.__intensity=this.__saturation*((.5-Math.abs(.5-this.__lightness))*2),s){case t:this.__hue=((e-r)/n+(e<r?6:0))/6;break;case e:this.__hue=((r-t)/n+2)/6;break;case r:this.__hue=((t-e)/n+4)/6}}}get _hue(){return -1===this.__hue&&this.updateHSL(),this.__hue}get _saturation(){return -1===this.__saturation&&this.updateHSL(),this.__saturation}get _lightness(){return -1===this.__lightness&&this.updateHSL(),this.__lightness}get _intensity(){return -1===this.__intensity&&this.updateHSL(),this.__intensity}}const distance=(t,e)=>Math.abs(t-e),hueDistance=(t,e)=>Math.min(distance(t,e),distance((t+.5)%1,(e+.5)%1));class AverageGroup{constructor(){this.colors=[],this._average=null}addColor(t){this.colors.push(t),this._average=null}isSamePalette(t,e,r,s){for(let i=0;i<this.colors.length;i++){let n=this.colors[i],o=hueDistance(n._hue,t._hue)<e&&distance(n._saturation,t._saturation)<r&&distance(n._lightness,t._lightness)<s;if(!o)return!1}return!0}get average(){if(!this._average){let{r:t,g:e,b:r}=this.colors.reduce((t,e)=>(t.r+=e._red,t.g+=e._green,t.b+=e._blue,t),{r:0,g:0,b:0}),s=this.colors.reduce((t,e)=>t+e._count,0);this._average=new Color(Math.round(t/this.colors.length),Math.round(e/this.colors.length),Math.round(r/this.colors.length)),this._average._count=s}return this._average}}class AverageManager{constructor(t,e,r){this._groups=[],this._hue=t,this._saturation=e,this._lightness=r}addColor(t){let e=this._groups.find(e=>e.isSamePalette(t,this._hue,this._saturation,this._lightness));if(e)e.addColor(t);else{let r=new AverageGroup;r.addColor(t),this._groups.push(r)}}getGroups(){return this._groups.map(t=>t.average)}}var sortColors=(t,e,r,s,i)=>{let n=new AverageManager(r,s,i);t.forEach(t=>n.addColor(t));let o=n.getGroups();return o.sort((t,r)=>{let s=(r._intensity+.1)*(.9-r._count/e),i=(t._intensity+.1)*(.9-t._count/e);return s-i}),o};const createFinalColor=(t,e)=>({hex:`#${"0".repeat(6-t._hex.toString(16).length)}${t._hex.toString(16)}`,red:t._red,green:t._green,blue:t._blue,area:t._count/e,hue:t._hue,saturation:t._saturation,lightness:t._lightness,intensity:t._intensity});var cleanInputs=({pixels:t=64e3,distance:e=.22,colorValidator:r=(t,e,r,s)=>(null!=s?s:255)>250,hueDistance:s=.08333333333333333,saturationDistance:i=.2,lightnessDistance:n=.2,crossOrigin:o=null}={})=>[Math.max(t,1),Math.min(Math.max(e,0),1),r,Math.min(Math.max(s,0),1),Math.min(Math.max(i,0),1),Math.min(Math.max(n,0),1),o];class LeafGroup{constructor(){this._count=0,this._children={}}addColor(t,e,r,s){return this._count++,this._children[t]?this._children[t]._count++:this._children[t]=new Color(e,r,s,t),this._children[t]}getList(){return Object.keys(this._children).map(t=>this._children[t])}createMainColor(){let t=this.getList(),e=t.reduce((t,e)=>t._count>=e._count?t:e),r=e.clone();return r._count=this._count,r}}class RootGroup{constructor(){this._count=0,this._children={}}getList(){return Object.keys(this._children).map(t=>this._children[t])}addColor(t,e,r){return this._count++,this.getLeafGroup((t>>4&15)<<8|(e>>4&15)<<4|r>>4&15).addColor(t<<16|e<<8|r,t,e,r)}getLeafGroup(t){return this._children[t]||(this._children[t]=new LeafGroup),this._children[t]}getColors(t){let e=this.getList().map(t=>t.createMainColor());e.sort((t,e)=>e._count-t._count);let r=[];for(;e.length;){let s=e.shift();e.filter(e=>Color.distance(s,e)<t).forEach(t=>{s._count+=t._count;let r=e.findIndex(e=>e===t);e.splice(r,1)}),r.push(s)}return r}}var extractor=({data:t,width:e,height:r},s,i,n)=>{let o=new RootGroup,a=e&&r&&Math.floor(e*r/s)||1,h=0;for(let l=0;l<t.length;l+=4*a){let u=t[l],c=t[l+1],g=t[l+2],d=t[l+3];n(u,c,g,d)?o.addColor(u,c,g):h++}return{colors:o.getColors(i),count:o._count+h}};const sortFinalColors=(t,e,r,s,i)=>{let n=sortColors(t,e,r,s,i);return n.map(t=>createFinalColor(t,e))},extractColorsFromImageData=(t,e={})=>{let[r,s,i,n,o,a]=cleanInputs(e),{colors:h,count:l}=extractor(t,r,s,i);return sortFinalColors(h,l,n,o,a)},getImageData=(t,e)=>{let r=t.width*t.height,s=r<e?t.width:Math.round(t.width*Math.sqrt(e/r)),i=r<e?t.height:Math.round(t.height*Math.sqrt(e/r)),n=document.createElement("canvas");n.width=s,n.height=i;let o=n.getContext("2d");return o.drawImage(t,0,0,t.width,t.height,0,0,s,i),o.getImageData(0,0,s,i)},extractColorsFromImage=(t,e={})=>{let[r,s,i,n,o,a,h]=cleanInputs(e);return t.crossOrigin=h,new Promise(e=>{let h=t=>{let h=getImageData(t,r),{colors:l,count:u}=extractor(h,r,s,i);e(sortFinalColors(l,u,n,o,a))};if(t.complete)h(t);else{let l=()=>{t.removeEventListener("load",l),h(t)};t.addEventListener("load",l)}})},extractColorsFromSrc=(t,e={})=>{let r=new Image;return r.src=t,extractColorsFromImage(r,e)},extractColors=(t,e)=>{if(t instanceof Image)return extractColorsFromImage(t,e);if(t instanceof ImageData||t instanceof Object&&t.data)return new Promise(r=>{r(extractColorsFromImageData(t,e))});if("string"==typeof t)return extractColorsFromSrc(t,e);throw Error("Can not analyse picture")};